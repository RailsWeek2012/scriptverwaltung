Scriptverwaltung

Eine kleine Ruby on Rails App, die es erlaubt Scripts hochzuladen und zu verwalten.
Um die Scriptverwaltung zu initialisieren geben Sie "rake startup" in ihre Konsole ein und starten Sie danach den Server.
Falls es zu einem Error kommt:

    bundle
    rake db:migrate
    rake sunspot:solr:start
    rake sunspot:reindex
    rails s
    
Falls ein Fehler kommt der Error: Severe errors in solr configuration. oder ähnlich lautet, dann liegt es daran, dass bereits eine sunspot engine gestartet ist, die fehlerhafte Konfigs geladen hat.
Hiezu folgende Befehle.
killall java
gem uninstall sunspot_rails
gem uninstall sunspot_with_kaminari
gem uninstall sunspot_solr
bundle                     
rake db:migrate            #
rake sunspot:solr:start    # Oder rake startup
rake sunspot:reindex       #
rails s


Login:
    Als Loginservice wird CAS benutzt. Identity ist nur zum Testen gedacht und sollte nicht produktiv genutzt werden.

Scripte:
    Scripts müssen PDF Dateien sein, die maximal 25 MB groß sind. Bevor die öffentlich downloadbar sind, müssen sie von einem Admin freigeschaltet werden.
    Scripts werden im Ordner "uploaded_scripts" gespeichert.

Suchen von Scripts:
    Das Suchen von Scripts ist möglich. Als Suchengine wird Sunspot verwendet.

User:
    Nur User haben die Möglichkeit Scripte hochzuladen und Bewertungen zu schreiben

Admin:
    Admins sind User. Admins können Scripts freischalten, löschen, hochladen, verändern und bekommen eine Email, wenn ein User ein
    neues Skript hochgeladen hat. Standardmässig ist jeder neu angemeldete User KEIN Admin. Ein Admin muss mit dem raketask "user:toggle_isadmin" gesetzt werden.
    Danach kann der Admin über sein Userprofil andere Usern die Adminrechte geben, bzw nehmen.

Bewertungen/Kommentare:
    User können zu einem Script nur eine Bewertung schreiben. Der Notenbereich geht von 1(gut) - 6(schlecht). Er hat die Möglichkeit die Bewertung zu löschen.

Mailfeature:
    Um das mailfeature "produktiv" einzusetzen, muss in der Datei "config/environments/development.rb". Valide Login Daten für einen SMTP Server eingegeben werden.

Raketasks:
rake user:toggle_isadmin    #Ändert den Zugriffsmodus des LETZTEN Users
rake user:new               #Erzeugt einen neuen User und trägt die Authentifizierung des LETZTEN Users in den neuen
                            User um. Der alte User bleibt bestehen, mitsamt seinen Scripten und Bewertungen. Er bekommt aber das prefix 'old_'




Genutze Quellen:

Quellen Download-Funktion:
http://railscasts.com/episodes/134-paperclip
http://stackoverflow.com/questions/2143300/protecting-the-content-of-public-in-a-rails-app

Quellen User-Management:
http://railscasts.com/episodes/304-omniauth-identity
https://sites.google.com/site/ecmharvey/addinguploads/OmniAuthOA-IdentitySetup.pdf?attredirects=0&d=1
http://net.tutsplus.com/tutorials/ruby/how-to-use-omniauth-to-authenticate-your-users/

Quellen Custom-RakeTask:
http://www.ultrasaurus.com/sarahblog/2009/12/creating-a-custom-rake-task/

Quellen Suche:
http://railscasts.com/episodes/37-simple-search-form
https://github.com/sunspot/sunspot/blob/master/README.md
http://railscasts.com/episodes/278-search-with-sunspot?autoplay=true
http://stackoverflow.com/questions/10717809/solr-minimum-match-results-ranking


Quellen Mailer:
http://guides.rubyonrails.org/action_mailer_basics.html

Quellen Paginate:
https://github.com/amatsuda/kaminari

